If you don't wanna use CMake you could start here.
This can be useful if CMake fails, if you have particular 
needs, or just want to understand how lqt works.

This file is maybe not up to date!


== Build the C++ parser ==

First you have to build the C++ parser, called cpptoxml.

If you took lqt from KDE svn, you don't have cpptoxml, so you need to
get it separately from svn.kde.org/home/kde/trunk/kdesupport/cpptoxml

cd cpptoxml
qmake
make
cd ..


== Create a cpp file including the module ==

mkdir ./src
echo '#include <QtGui>' > ./src/qtgui.cpp

== Create the XML description of the file ==

./cpptoxml/cpptoxml -C cpptoxml/parser/rpp/pp-qt-configuration ./src/qtgui.cpp > src/qtgui.xml

Remember that you have to set the QT_INCLUDE env variable such that
$QT_INCLUDE contains the QtCore, QtGui, etc... directories. You can check with

ls -d $QT_INCLUDE/Qt*

It should show a list of directories corresponding to the various
modules of Qt.

The same command could be issued directly on the header file
e.g.
/usr/include/QtGui/QtGui
instead of
./src/qtgui.cpp

== Create destination directory and generate bindings ==

mkdir qtgui_src
lua generator/generator.lua src/qtgui.xml -i QtGui -i lqt_qt.hpp -n qtgui -t generator/types.lua -t generator/qtypes.lua -f generator/qt_internal.lua

On windows use the command:
lua generator\generator.lua src\qtgui.xml -i QtGui -i lqt_qt.hpp -n qtgui -t generator\types.lua -t generator\qtypes.lua -f generator\qt_internal.lua



The options tell the generator which is the name of the
module (-n), which type definitions to use (-t), which files
must be included in the final binding (-i), how to filter out
some classes (-f)

Every time you issue this command you will likely end up with
different binding file and also a different number of files,
even if src/qtgui.xml has not changed. It is probably better
to always begin with an empty directory each time, so that
there are no leftover files from previous runs.

The generator creates a <module_name>_types.lua which can be
given to other generators using the switch -t. In this way
the classes generated by the first run will be available to
the second binding.

== Copy static files and compile binding ==

cp common/lqt_*.?pp qtgui_src/
cd qtgui_src/
qmake -project -template lib -o qtgui.pro
qmake
make

Then wait. If everything works, you will likely have a
working lua module named libqtgui.so.1.0.0 . Rename or
link as qtcore.so, and place where require can find it.

You may have to tell qmake where to find Lua headers.

