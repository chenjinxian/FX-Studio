#ifndef AA
#define AA

#include <iostream>
#include <vector>
#include <cstdio>


#include <cassert>

namespace N {

  class Shape {
  public:
  Shape() {}
  };

  class Sphere : public Shape
  {
  public:
  Sphere() {}
  };

  class Geometry {
  public:
    Geometry(Shape *shape) { assert(shape); }
    void add(Shape *shape) { assert(shape); }
  };

}


namespace N
{

class A 
{
public:
  A() {}
  enum E {
    E1=3,
    E2=5,
    E3=7
    
  };
  
  void setInt( int i ) { std::cerr << "setInt: " << i << std::endl; }
  void setEnum( E i ) { std::cerr << "setEnum: " << i << std::endl; }
};

}



typedef std::vector<void*> ASomething;

class C {
private:
~C() {}
};

namespace test {
class A
{
 public:
 A() { std::cerr << "A::A" << std::endl; }
 ~A() { std::cerr << "A::~A" << std::endl; }
 

 const std::string & get_string(const std::string& a="") {return a;}
 void doFunc() { std::cout << "A::doFunc()" << std::endl; func(); }
 virtual void func() { std::cout << "A::func()" << std::endl;  }

 class B
 {
   public:

   B() { std::cout << "B::B" << std::endl; }
  ~B() { std::cout << "B::~B" << std::endl; }

   void do_something() { std::cout << "B::do_something()" << std::endl; }
 
 };

 void useB(B* b) { b->do_something();
  } 
};
}


namespace N {
typedef double Real;

 class  Time
 {
 public:
   Time() {}
   virtual ~Time() {}

    void setTimeStep(Real h) {}
   virtual Real getTimeStep() const { return 32;}
 protected:
   Real m_timeStep;
 };
}

#endif

